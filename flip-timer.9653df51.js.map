{"mappings":"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","sources":["src/js/flip.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n    startButton: document.querySelector('[data-start]'),\n    stopButton: document.querySelector('[data-stop]'),\n    dateInput: document.querySelector('#container__datetime-picker'),\n    daysTens: document.querySelector('[data-days-tens]'),\n    daysOnes: document.querySelector('[data-days-ones]'),\n    hoursTens: document.querySelector('[data-hours-tens]'),\n    hoursOnes: document.querySelector('[data-hours-ones]'),\n    minutesTens: document.querySelector('[data-minutes-tens]'),\n    minutesOnes: document.querySelector('[data-minutes-ones]'),\n    secondsTens: document.querySelector('[data-seconds-tens]'),\n    secondsOnes: document.querySelector('[data-seconds-ones]'),\n};\n\nrefs.startButton.disabled = true;\nrefs.stopButton.disabled = true;\n\nlet timerId;\n\nNotify.init({\n    position: 'center-top',\n});\nconst convertMs = ms => {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n};\n\nconst flip = (flipCard, newNumber) => {\n    const topHalf = flipCard.querySelector('.top');\n    const startNumber = parseInt(topHalf.textContent);\n    if (newNumber === startNumber) return;\n\n    const bottomHalf = flipCard.querySelector('.bottom');\n    const topFlip = document.createElement('div');\n    topFlip.classList.add('top-flip');\n    const bottomFlip = document.createElement('div');\n    bottomFlip.classList.add('bottom-flip');\n\n    top.textContent = startNumber;\n    bottomHalf.textContent = startNumber;\n    topFlip.textContent = startNumber;\n    bottomFlip.textContent = newNumber;\n\n    topFlip.addEventListener('animationstart', e => {\n        topHalf.textContent = newNumber;\n    });\n    topFlip.addEventListener('animationend', e => {\n        topFlip.remove();\n    });\n    bottomFlip.addEventListener('animationend', e => {\n        bottomHalf.textContent = newNumber;\n        bottomFlip.remove();\n    });\n    flipCard.append(topFlip, bottomFlip);\n};\n\nconst flipAllCards = time => {\n    const seconds = convertMs(time).seconds;\n    const minutes = convertMs(time).minutes;\n    const hours = convertMs(time).hours;\n    const days = convertMs(time).days;\n\n    flip(refs.daysTens, Math.floor(days / 10));\n    flip(refs.daysOnes, days % 10);\n    flip(refs.hoursTens, Math.floor(hours / 10));\n    flip(refs.hoursOnes, hours % 10);\n    flip(refs.minutesTens, Math.floor(minutes / 10));\n    flip(refs.minutesOnes, minutes % 10);\n    flip(refs.secondsTens, Math.floor(seconds / 10));\n    flip(refs.secondsOnes, seconds % 10);\n};\n\nconst onStartButtonClick = e => {\n    e.target.disabled = true;\n    refs.stopButton.disabled = false;\n    refs.dateInput.disabled = true;\n    const currentDate = new Date(refs.dateInput.value).getTime();\n    let previousTimeBetweenDates;\n    timerId = setInterval(() => {\n        const newDate = new Date().getTime();\n        const ms = currentDate - newDate;\n        // console.log(convertMs(ms));\n        if (ms >= 0) flipAllCards(ms);\n        else {\n            clearInterval(timerId);\n            refs.dateInput.disabled = false;\n            refs.stopButton.disabled = true;\n            Notify.info('Ð¡ountdown is over!');\n        }\n\n        previousTimeBetweenDates = ms;\n    }, 250);\n};\n\nconst onStopButtonClick = e => {\n    e.target.disabled = true;\n    refs.dateInput.disabled = false;\n    refs.startButton.disabled = false;\n    clearInterval(timerId);\n    flip(refs.daysTens, 0);\n    flip(refs.daysOnes, 0);\n    flip(refs.hoursTens, 0);\n    flip(refs.hoursOnes, 0);\n    flip(refs.minutesTens, 0);\n    flip(refs.minutesOnes, 0);\n    flip(refs.secondsTens, 0);\n    flip(refs.secondsOnes, 0);\n};\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const currentDate = new Date().getTime();\n        const selectedDate = selectedDates[0].getTime();\n        const ms = selectedDate - currentDate;\n        if (selectedDate > currentDate) {\n            refs.startButton.disabled = false;\n        } else {\n            Notify.failure('Please choose a date in the future');\n            refs.startButton.disabled = true;\n        }\n    },\n};\n\nflatpickr('#container__datetime-picker', options);\n\nrefs.startButton.addEventListener('click', onStartButtonClick);\n\nrefs.stopButton.addEventListener('click', onStopButtonClick);\n"],"names":["$fbklV","parcelRequire","$57bc0551e6540762$var$refs","startButton","document","querySelector","stopButton","dateInput","daysTens","daysOnes","hoursTens","hoursOnes","minutesTens","minutesOnes","secondsTens","secondsOnes","$57bc0551e6540762$var$timerId","disabled","$iQIUW","Notify","init","position","$57bc0551e6540762$var$convertMs","ms","minute","second","hour","day","Math","floor","$57bc0551e6540762$var$flip","flipCard","newNumber","topHalf","startNumber","parseInt","textContent","bottomHalf","topFlip","createElement","classList","add","bottomFlip","top","addEventListener","e","remove","append","$57bc0551e6540762$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","currentDate","getTime","selectedDate","failure","default","target","value","previousTimeBetweenDates","setInterval","newDate","time","seconds","minutes","hours","days","$57bc0551e6540762$var$flipAllCards","clearInterval","info"],"version":3,"file":"flip-timer.9653df51.js.map"}